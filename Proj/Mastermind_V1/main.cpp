/* 
 * File:   main.cpp
 * Author: Victor Alcaraz
 * Created on October 6, 2015, 3:13 PM
 * Purpose: Mastermind Game, Version 1
 */

//system libraries
#include <cstdlib>
#include <iostream>
#include <ctime>
#include <cstring>
#include <fstream>
using namespace std;

//user libraries
#include "SaveData.h"

//global constants

//function prototypes
void inst(string &);
void hardshp(bool &,unsigned short &,unsigned short &,unsigned short &);
void game(int *,unsigned short &,unsigned short &,unsigned short &);
void board();

//execution begins here
int main(int argc, char** argv) {
    
    //random number seed
    srand(static_cast<unsigned int>(time(0)));
    
    //declare variables
    
    ofstream save;  //output stream of saved data
    string temp;    //temporary string variable
    
    //player game variables
    string pCode;             //player code input
    char dffclty;             //player difficulty input
    bool again=true;          //play again boolean
    Save s;                   //data saved to a structure         
    s.data=new int [5];       //set the array of structure.
    //initialize all the data in the array to 0;
    for(int i=0;i<5;i++){
        *(s.data+i)=0;
    }
    
    //game information variables
    unsigned short mod;       //number range
    unsigned short holes;     //number of holes
    unsigned short tries;     //number of tries
    
    inst(temp); // rules/instructions
    
    //loop for the game
    do{
        unsigned short pTries=0;  //number of tries player has attempted\
            
        hardshp(again,mod,holes,tries); //getting game difficulty
        
        if(again){    //check if the player is playing game
            
            //play the game
            game(s.data,mod,holes,tries);
            
        }else cout<<"Thank you for playing"<<endl;
    }while(again);  //play again if again is true or else the game is over
    
    delete []s.data;
    return 0;
}

/*******************************************************************************
 *                                 board                                       *
 *******************************************************************************
 * purpose: to display the board after every guess
 * input:
 *      g -> guess
 *      h -> number of holes
 *      t -> number of tries
 * output:
 *      board
 ******************************************************************************/
void board(int h,int t){
    
    
    for(int i=0;i<t;i++){
        for(int j=0;j<h;j++){
            if(j==0) cout<<"        ";
//            if()
            cout<<'O';
            if(j<h) cout<<' ';
        }
        cout<<endl;
    }
}

/*******************************************************************************
 *                                 game                                        *
 *******************************************************************************
 * purpose: to play the game
 * input:
 *      m -> range of numbers
 *      h -> number of holes
 *      t -> number of tries
 * input-output:
 *      s->data -> array of structure
 ******************************************************************************/
void game(int *s,unsigned short &m,unsigned short &h,unsigned short &t){
    //declare variables
    int a;         //answer generated by the cpu
    string guess;  //player guess
    bool win=false;//win or lose boolean
    int nTry=t;    //number of tries performed
    int pCount=0;  //number of numbers correct and in position
    int nCount=0;  //number of numbers correct but not in position
    bool valid;

    //2D Array board
    char board[t][h];
    for(int i=0;i<t;i++){
        for(int j=0;j<h;j++){
            board[i][j]=145;
        }
    }
    
    //2D array validation
    string correct[t][2];
    for(int i=0;i<t;i++){
        for(int j=0;j<2;j++){
            correct[i][j]="T";
        }
    }
    
    int *code=new int[h];
    //get the answer
    for(int i=0;i<h;i++){
        a=rand()%m;
        code[i]=a;
//        cout<<code[i];
    }
    cout<<"The computer has selected a code you must break"<<endl;
    do{
        //re-initialize variables to zero
        pCount=0;
        nCount=0;
        
        //output tries data and board
        cout<<nTry<<" tries remaining"<<endl;
        
        for(int i=0;i<t;i++){
            cout<<"        ";
            for(int j=0;j<h;j++){
                cout<<board[i][j]<<" ";
            }
            for(int k=0;k<2;k++){
                
            }
            cout<<endl;
        }
        
        do{
            valid=true;
            cout<<"What is your guess?: ";
            getline(cin,guess);
            if(guess.size()!=h){
                cout<<"Incomplete Code. Re-enter your code: ";
                valid=false;
            }
            else{
                for(int i=0;i<h;i++){
                    if(!isdigit(guess[i])){
                        valid=false;
                    }
                }
                if(!valid) cout<<"You didn't enter a digit"<<endl;
            }
        }while(!valid);
        nTry--; //decrement after every guess
        
        //set the guess to the board
        for(int i = 0; i < h; i++){
            board[nTry][i] = guess[i];
        }
        
        //create a boolean parallel array to check off a number that has been
        //confirmed to not check duplicates
        bool check[h];
        for(int i=0;i<h;i++){
            check[i]=true;
        }
        
        for(int i=0;i<h;i++){
            if(guess[i]-48==code[i]){
                //increment if a number is correct and in the correct spot
                pCount++;
                check[i]=false;
            }
        }
        for(int i=0;i<h;i++){
            if(guess[i]-48!=code[i]){
                for(int j=0;j<h;j++){
                   if(guess[i]-48==code[j] && check[j]){
                       //increment if a number is correct w/ incorrect spot
                       nCount++;
                       check[j]=false;
                       //break once a number is tested correct.
                       break;
                    } 
                }
            }
        }
        cout<<pCount<<" numbers in the correct spot"<<endl;
        cout<<nCount<<" numbers correct but not in the right spot"<<endl;
        
        //if player cracked the code, output win message.
        if(pCount==h){
            cout<<"You have cracked the code! Nice Job!"<<endl;
            win=true;
        }
    
    }while(!win && nTry>0);
    
    //output the answer
    cout <<"Answer: ";
    for(int i=0;i <h;i++){
        cout <<code [i];
    }
    cout<<endl;
    cout<<"Your Final guess: "<<guess<<endl<<endl;
    
    //if the player did not win, output lose message.
    if(!win){
        cout<<"Sorry, you lost! You have reached your try limit. Please Try"
                "Again."<<endl;
    }
    
    delete []code;
}

/*******************************************************************************
 *                              hardshp                                        *
 *******************************************************************************
 * purpose: to get the difficulty of the game
 * input:
 *      d -> difficulty chosen
 * input-output:
 *      m -> number range
 *      h -> number of holes
 *      t -> number of tries
 ******************************************************************************/
void hardshp(bool &x,unsigned short &m,unsigned short &h,unsigned short &t){
    char d;  //player difficulty input
    //validation
    do{
        cout<<"Choose your difficulty:\n[E]asy, [M]edium, [H]ard, or [C]ustom"
                <<endl<<"[X] to exit (uppercase 'X' only)"<<endl;
        cin>>d;   //difficulty input
        cout<<endl;

        //if the input isn't valid output the statement
        if(d!='E' && d!='e' && d!='M' && d!='m' &&
           d!='H' && d!='h' && d!='C' && d!='c' && d!='X'){
            cout<<"You did not enter an appropriate difficulty"<<endl<<endl;
        }
    }while(d!='E' && d!='e' && d!='M' && d!='m' &&
           d!='H' && d!='h' && d!='C' && d!='c' && d!='X');
    t=12;      
    switch(d){
        case 'E': case 'e': {
            cout<<"Difficulty chosen: Easy"<<endl;
            m=6;
            h=4;
            break;
        }
        case 'M': case 'm': {
            cout<<"Difficulty chosen: Medium"<<endl;
            m=6;
            h=5;
            break;
        }
        case 'H': case 'h': {
            cout<<"Difficulty chosen: Hard"<<endl;
            m=9;
            h=6;
            break;
        }
        case 'C': case 'c': {
            cout<<"Difficulty chosen: Custom"<<endl;
            do{
                cout<<"What do you want your number range be? 1-";
                cin>>m;
                if(m<6 || m>9){
                    cout<<"Please enter a number of from 6 to 9"<<endl;
                }
            }while(m<6 || m>9);
            do{
                cout<<"How many holes do you want?: ";
                cin>>h;
                if(h<4 || h>6){
                    cout<<"Please enter a number of holes from 4 to 6"
                            <<endl;
                }
            }while(h<4 || h>6);
            do{
                cout<<"How many tries do you want to have?: ";
                cin>>t;
                if(t<6 || t>12){
                    cout<<"Please enter a number of tries from 6 to 12"
                            <<endl;
                }
            }while(t<6 || t>12);
            cout<<endl<<"Difficulty chosen: Custom"<<endl;
            break;
        }
        case 'X': x=false; break;
        default: cout<<"no difficulty"<<endl;
    }
    if(d!='X'){
        cout<<"Number range:    1-"<<m<<endl;
        cout<<"Number of holes: "<<h<<endl;
        cout<<"Number of tries: "<<t<<endl;
        cout<<endl;
    }
    
}

/*******************************************************************************
 *                                 inst                                        *
 *******************************************************************************
 * purpose: to display the rules of the game
 * file:
 *      rules -> input file stream
 * output:
 *      temp -> each line from the file
 ******************************************************************************/
void inst(string &temp){
    ifstream rules; //input stream of rules
    
    //open the file
    rules.open("rules.txt");
    
    //output the rules to the screen
    while(getline(rules,temp)){
        cout<<temp;
    }
    rules.close(); //closing the file
}